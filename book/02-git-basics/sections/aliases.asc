[[_git_aliases]]
=== கிட் மாற்றுப்பெயர்கள்

(((aliases)))
நாம் இந்த அத்தியாயத்தை முடிப்பதற்கு முன், உங்கள் Git அனுபவத்தை எளிமையாகவும், எளிதாகவும், மேலும் பழக்கமாகவும் மாற்றக்கூடிய ஒரு சிறிய முனை மட்டுமே உள்ளது: மாற்றுப்பெயர்கள். இங்கு குறிப்பிடபட்ட மாற்றுப்பெயர்கள் இந்த புத்தகத்தில் வேறு எங்கும் நாங்கள் அவற்றைக் குறிப்பிட மாட்டோம் அல்லது அவற்றைப் பயன்படுத்தினீர்கள் என்று கருத மாட்டோம், ஆனால் அவற்றை எவ்வாறு பயன்படுத்துவது என்பது உங்களுக்குத் தெரிந்திருக்க வேண்டும்.


உங்கள் கட்டளையை ஓரளவு தட்டச்சு செய்தால் கிட் தானாகவே ஊகிக்காது.
ஒவ்வொரு Git கட்டளைகளின் முழு உரையையும் நீங்கள் தட்டச்சு செய்ய விரும்பவில்லை என்றால், `git config` ஐப் பயன்படுத்தி ஒவ்வொரு கட்டளைக்கும் ஒரு மாற்றுப்பெயரை எளிதாக அமைக்கலாம். (((Git கட்டளைகள், கட்டமைப்பு))
நீங்கள் அமைக்க விரும்பக்கூடிய சில எடுத்துக்காட்டுகள் இங்கே:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

இதன் பொருள், எடுத்துக்காட்டாக, `git commit` என்பதற்கு பதிலாக, நீங்கள் `git ci` கட்டளையை முடுக்க வேண்டும். நீங்கள் Git ஐப் பயன்படுத்தும்போது, மற்ற கட்டளைகளையும் அடிக்கடி பயன்படுத்துவீர்கள்; புதிய மாற்றுப்பெயர்களை உருவாக்க தயங்க வேண்டாம்.

கிட் கட்டளைகளில் இன்னும் பிற கட்டளைகளும் இருந்திருக்க வேண்டும் என்று நீங்கள் நினைக்கும் கட்டளைகளை உருவாக்குவதற்கும் இந்த நுட்பம் மிகவும் பயனுள்ளதாக இருக்கும். எடுத்துக்காட்டாக, ஒரு கோப்பை git unstage பயன்பாட்டினில் இருக்கும் சிக்கலை சரிசெய்ய, உங்கள் சொந்த நிலையற்ற மாற்றுப்பெயரை Git இல் சேர்க்கலாம்:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

இது பின்வரும் இரண்டு கட்டளைகளை சமமாக்குகிறது:

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----
இது சற்று தெளிவாகத் தெரிகிறது.
இது போன்று `last` கட்டளையைச் சேர்ப்பதும் பொதுவானது: 

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

This way, you can see the last commit easily:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    Test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

As you can tell, Git simply replaces the new command with whatever you alias it for.
However, maybe you want to run an external command, rather than a Git subcommand.
In that case, you start the command with a `!` character.
This is useful if you write your own tools that work with a Git repository.
We can demonstrate by aliasing `git visual` to run `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
